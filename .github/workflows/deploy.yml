name: Deploy 3 Tier Microservice App

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 121775527711.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: mern-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "Tests passed"

  build-and-push-backend:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Backend Image
        run: |
          cd server
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}-backend:latest .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}-backend:latest

  build-and-push-frontend:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd client
          npm install

      - name: Build Frontend with Environment Variables
        run: |
          cd client
          # Build with production environment variables
          VITE_PRODUCTION_API_URL=http://174.129.55.219:3000/api npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Frontend Docker Image
        run: |
          cd client
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}-frontend:latest .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}-frontend:latest

  deploy:
    needs: [build-and-push-backend, build-and-push-frontend]
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create environment file with all secrets
            cat << 'ENVFILE' > /opt/app/.env
            # Backend and Database Configuration
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PORT=3306
            
            PORT=3000
            KEY=${{ secrets.KEY }}

            OPENAI_SECRET_KEY=${{ secrets.OPENAI_SECRET_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}

            EMAIL_USER=pc16777.syedtalhahussain@gmail.com
            EMAIL_PASS=${{ secrets.EMAIL_PASS }}

            NODE_ENV=production
            PRODUCTION_URL=http://174.129.55.219
            
            # Frontend Configuration
            VITE_PRODUCTION_API_URL=http://174.129.55.219:3000/api
            VITE_STRIPE_PUBLIC_KEY=${{ secrets.VITE_STRIPE_PUBLIC_KEY }}
            VITE_NODE_ENV=production
            ENVFILE

            # Create deploy script..
            cat << 'DEPLOYSCRIPT' > /opt/app/deploy.sh
            #!/bin/bash
            set -e
            
            cd /opt/app
            
            # Login to ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 121775527711.dkr.ecr.us-east-1.amazonaws.com
            
            # Pull latest images
            docker pull 121775527711.dkr.ecr.us-east-1.amazonaws.com/mern-app-backend:latest
            docker pull 121775527711.dkr.ecr.us-east-1.amazonaws.com/mern-app-frontend:latest
            
            # Create docker-compose file
            cat << 'DOCKERCOMPOSE' > docker-compose.prod.yml
            version: '3.8'
            services:
              backend:
                image: 121775527711.dkr.ecr.us-east-1.amazonaws.com/mern-app-backend:latest
                container_name: backend
                ports:
                  - "3000:3000"
                env_file:
                  - .env
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
            
              frontend:
                image: 121775527711.dkr.ecr.us-east-1.amazonaws.com/mern-app-frontend:latest
                container_name: frontend
                ports:
                  - "8080:80"
                restart: unless-stopped
            DOCKERCOMPOSE
            
            # Stop and start containers
            docker-compose -f docker-compose.prod.yml down || true
            docker-compose -f docker-compose.prod.yml up -d
            
            # Clean up unused images
            docker image prune -f
            
            echo "Deployment completed!"
            DEPLOYSCRIPT

            chmod +x /opt/app/deploy.sh
            cd /opt/app && ./deploy.sh